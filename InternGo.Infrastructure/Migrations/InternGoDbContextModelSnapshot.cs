// <auto-generated />
using System;
using InternGo.Infrastructure.Persistence.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InternGo.Infrastructure.Migrations
{
    [DbContext(typeof(InternGoDbContext))]
    partial class InternGoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InternGo.Domain.Entities.AIRecommendation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InternshipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("MatchScore")
                        .HasColumnType("float");

                    b.Property<DateTime>("RecommendedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("StudentProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InternshipId");

                    b.HasIndex("StudentProfileId");

                    b.ToTable("ai_recommendations", (string)null);
                });

            modelBuilder.Entity("InternGo.Domain.Entities.AdminLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("AdminUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TargetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TargetTable")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("AdminUserId");

                    b.ToTable("admin_logs", (string)null);
                });

            modelBuilder.Entity("InternGo.Domain.Entities.CompanyProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MaxTrainees")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WorkingHours")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("company_profiles", (string)null);
                });

            modelBuilder.Entity("InternGo.Domain.Entities.Internship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<Guid>("CompanyProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkillsRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyProfileId");

                    b.ToTable("internships", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaa1111-1111-1111-1111-111111111111"),
                            Capacity = 2,
                            CompanyProfileId = new Guid("c26c729d-e236-4b0e-90e8-8057f1f01a40"),
                            Deadline = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Work on ASP.NET APIs and SQL databases.",
                            SkillsRequired = "dotnet, sql, teamwork",
                            Title = "Backend Developer Intern"
                        },
                        new
                        {
                            Id = new Guid("bbbb2222-2222-2222-2222-222222222222"),
                            Capacity = 1,
                            CompanyProfileId = new Guid("fabfef3d-78bf-46d9-aeec-32a142101bea"),
                            Deadline = new DateTime(2025, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Help build intelligent systems using Python.",
                            SkillsRequired = "python, machinelearning, communication",
                            Title = "AI Assistant Intern"
                        },
                        new
                        {
                            Id = new Guid("cccc3333-3333-3333-3333-333333333333"),
                            Capacity = 3,
                            CompanyProfileId = new Guid("1c0cd8ff-6e48-45f2-8154-673a3be659b5"),
                            Deadline = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Develop responsive UIs using JS/React.",
                            SkillsRequired = "javascript, html, css",
                            Title = "Frontend Developer Intern"
                        });
                });

            modelBuilder.Entity("InternGo.Domain.Entities.InternshipApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AppliedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("InternshipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<Guid>("StudentProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InternshipId");

                    b.HasIndex("StudentProfileId");

                    b.ToTable("applications", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("fabfef3d-78bf-46d9-aeec-32a142101bea"),
                            AppliedAt = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InternshipId = new Guid("aaaa1111-1111-1111-1111-111111111111"),
                            Status = "Pending",
                            StudentProfileId = new Guid("758cdc94-41d5-40d1-8f86-8125bb90c326")
                        });
                });

            modelBuilder.Entity("InternGo.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InternshipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PostedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InternshipId");

                    b.HasIndex("StudentProfileId");

                    b.ToTable("reviews", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c26c729d-e236-4b0e-90e8-8057f1f01a40"),
                            Comment = "Excellent mentorship and environment!",
                            InternshipId = new Guid("aaaa1111-1111-1111-1111-111111111111"),
                            PostedAt = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 5,
                            StudentProfileId = new Guid("758cdc94-41d5-40d1-8f86-8125bb90c326")
                        });
                });

            modelBuilder.Entity("InternGo.Domain.Entities.StudentProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoverLetter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PreferredLocation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProgrammingLanguages")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Skills")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("student_profiles", (string)null);
                });

            modelBuilder.Entity("InternGo.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c26c729d-e236-4b0e-90e8-8057f1f01a40"),
                            CreatedAt = new DateTime(2024, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tech@company.com",
                            FullName = "Tech Admin",
                            IsActive = true,
                            PasswordHash = "AQAAAAIAAYagAAAAED2OsyPCoFAnQL23xlhHPOsNRaK7U99QqJQH5qz6k45XsZFH7hAcmuCokZ3AQ8v9Ag==",
                            Role = "Company"
                        },
                        new
                        {
                            Id = new Guid("fabfef3d-78bf-46d9-aeec-32a142101bea"),
                            CreatedAt = new DateTime(2024, 4, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ai@company.com",
                            FullName = "AI Admin",
                            IsActive = true,
                            PasswordHash = "AQAAAAIAAYagAAAAED2OsyPCoFAnQL23xlhHPOsNRaK7U99QqJQH5qz6k45XsZFH7hAcmuCokZ3AQ8v9Ag==",
                            Role = "Company"
                        },
                        new
                        {
                            Id = new Guid("1c0cd8ff-6e48-45f2-8154-673a3be659b5"),
                            CreatedAt = new DateTime(2024, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "web@company.com",
                            FullName = "Web Admin",
                            IsActive = true,
                            PasswordHash = "AQAAAAIAAYagAAAAED2OsyPCoFAnQL23xlhHPOsNRaK7U99QqJQH5qz6k45XsZFH7hAcmuCokZ3AQ8v9Ag==",
                            Role = "Company"
                        },
                        new
                        {
                            Id = new Guid("3f2504e0-4f89-11d3-9a0c-0305e82c3301"),
                            CreatedAt = new DateTime(2024, 4, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@internGo.com",
                            FullName = "Super Admin",
                            IsActive = true,
                            PasswordHash = "AQAAAAIAAYagAAAAEPkjiCFIrYUNqIXBspWdaKHnrxGqaKkUXxlTkFf7MISzkAmqptzKT0Z0y6Vxt1vtcg==",
                            Role = "Admin"
                        });
                });

            modelBuilder.Entity("InternGo.Domain.Entities.AIRecommendation", b =>
                {
                    b.HasOne("InternGo.Domain.Entities.Internship", "Internship")
                        .WithMany()
                        .HasForeignKey("InternshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InternGo.Domain.Entities.StudentProfile", "StudentProfile")
                        .WithMany("AIRecommendations")
                        .HasForeignKey("StudentProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Internship");

                    b.Navigation("StudentProfile");
                });

            modelBuilder.Entity("InternGo.Domain.Entities.AdminLog", b =>
                {
                    b.HasOne("InternGo.Domain.Entities.User", "Admin")
                        .WithMany("AdminLogs")
                        .HasForeignKey("AdminUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("InternGo.Domain.Entities.CompanyProfile", b =>
                {
                    b.HasOne("InternGo.Domain.Entities.User", "User")
                        .WithOne("CompanyProfile")
                        .HasForeignKey("InternGo.Domain.Entities.CompanyProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InternGo.Domain.Entities.Internship", b =>
                {
                    b.HasOne("InternGo.Domain.Entities.CompanyProfile", "CompanyProfile")
                        .WithMany("Internships")
                        .HasForeignKey("CompanyProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyProfile");
                });

            modelBuilder.Entity("InternGo.Domain.Entities.InternshipApplication", b =>
                {
                    b.HasOne("InternGo.Domain.Entities.Internship", "Internship")
                        .WithMany("Applications")
                        .HasForeignKey("InternshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InternGo.Domain.Entities.StudentProfile", "StudentProfile")
                        .WithMany("Applications")
                        .HasForeignKey("StudentProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Internship");

                    b.Navigation("StudentProfile");
                });

            modelBuilder.Entity("InternGo.Domain.Entities.Review", b =>
                {
                    b.HasOne("InternGo.Domain.Entities.Internship", "Internship")
                        .WithMany()
                        .HasForeignKey("InternshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InternGo.Domain.Entities.StudentProfile", "StudentProfile")
                        .WithMany("Reviews")
                        .HasForeignKey("StudentProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Internship");

                    b.Navigation("StudentProfile");
                });

            modelBuilder.Entity("InternGo.Domain.Entities.StudentProfile", b =>
                {
                    b.HasOne("InternGo.Domain.Entities.User", "User")
                        .WithOne("StudentProfile")
                        .HasForeignKey("InternGo.Domain.Entities.StudentProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InternGo.Domain.Entities.CompanyProfile", b =>
                {
                    b.Navigation("Internships");
                });

            modelBuilder.Entity("InternGo.Domain.Entities.Internship", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("InternGo.Domain.Entities.StudentProfile", b =>
                {
                    b.Navigation("AIRecommendations");

                    b.Navigation("Applications");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("InternGo.Domain.Entities.User", b =>
                {
                    b.Navigation("AdminLogs");

                    b.Navigation("CompanyProfile")
                        .IsRequired();

                    b.Navigation("StudentProfile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

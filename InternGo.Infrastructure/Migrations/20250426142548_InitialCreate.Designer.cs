// <auto-generated />
using System;
using InternGo.Infrastructure.Persistence.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InternGo.Infrastructure.Migrations
{
    [DbContext(typeof(InternGoDbContext))]
    [Migration("20250426142548_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IInternGo.Domain.Entities.AIRecommendation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InternshipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("MatchScore")
                        .HasColumnType("float");

                    b.Property<DateTime>("RecommendedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("StudentProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InternshipId");

                    b.HasIndex("StudentProfileId");

                    b.ToTable("ai_recommendations", (string)null);
                });

            modelBuilder.Entity("IInternGo.Domain.Entities.AdminLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("AdminUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TargetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TargetTable")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("AdminUserId");

                    b.ToTable("admin_logs", (string)null);
                });

            modelBuilder.Entity("IInternGo.Domain.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AppliedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("InternshipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<Guid>("StudentProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InternshipId");

                    b.HasIndex("StudentProfileId");

                    b.ToTable("applications", (string)null);
                });

            modelBuilder.Entity("IInternGo.Domain.Entities.CompanyProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("company_profiles", (string)null);
                });

            modelBuilder.Entity("IInternGo.Domain.Entities.Internship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<Guid>("CompanyProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkillsRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyProfileId");

                    b.ToTable("internships", (string)null);
                });

            modelBuilder.Entity("IInternGo.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InternshipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PostedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InternshipId");

                    b.HasIndex("StudentProfileId");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("IInternGo.Domain.Entities.StudentProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CVText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("student_profiles", (string)null);
                });

            modelBuilder.Entity("IInternGo.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3f2504e0-4f89-11d3-9a0c-0305e82c3301"),
                            CreatedAt = new DateTime(2024, 4, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@internGo.com",
                            FullName = "Super Admin",
                            IsActive = true,
                            PasswordHash = "AQAAAAIAAYagAAAAEPkjiCFIrYUNqIXBspWdaKHnrxGqaKkUXxlTkFf7MISzkAmqptzKT0Z0y6Vxt1vtcg==",
                            Role = "Admin"
                        });
                });

            modelBuilder.Entity("IInternGo.Domain.Entities.AIRecommendation", b =>
                {
                    b.HasOne("IInternGo.Domain.Entities.Internship", "Internship")
                        .WithMany()
                        .HasForeignKey("InternshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IInternGo.Domain.Entities.StudentProfile", "StudentProfile")
                        .WithMany("AIRecommendations")
                        .HasForeignKey("StudentProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Internship");

                    b.Navigation("StudentProfile");
                });

            modelBuilder.Entity("IInternGo.Domain.Entities.AdminLog", b =>
                {
                    b.HasOne("IInternGo.Domain.Entities.User", "Admin")
                        .WithMany("AdminLogs")
                        .HasForeignKey("AdminUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("IInternGo.Domain.Entities.Application", b =>
                {
                    b.HasOne("IInternGo.Domain.Entities.Internship", "Internship")
                        .WithMany("Applications")
                        .HasForeignKey("InternshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IInternGo.Domain.Entities.StudentProfile", "StudentProfile")
                        .WithMany("Applications")
                        .HasForeignKey("StudentProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Internship");

                    b.Navigation("StudentProfile");
                });

            modelBuilder.Entity("IInternGo.Domain.Entities.CompanyProfile", b =>
                {
                    b.HasOne("IInternGo.Domain.Entities.User", "User")
                        .WithOne("CompanyProfile")
                        .HasForeignKey("IInternGo.Domain.Entities.CompanyProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IInternGo.Domain.Entities.Internship", b =>
                {
                    b.HasOne("IInternGo.Domain.Entities.CompanyProfile", "CompanyProfile")
                        .WithMany("Internships")
                        .HasForeignKey("CompanyProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyProfile");
                });

            modelBuilder.Entity("IInternGo.Domain.Entities.Review", b =>
                {
                    b.HasOne("IInternGo.Domain.Entities.Internship", "Internship")
                        .WithMany()
                        .HasForeignKey("InternshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IInternGo.Domain.Entities.StudentProfile", "StudentProfile")
                        .WithMany("Reviews")
                        .HasForeignKey("StudentProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Internship");

                    b.Navigation("StudentProfile");
                });

            modelBuilder.Entity("IInternGo.Domain.Entities.StudentProfile", b =>
                {
                    b.HasOne("IInternGo.Domain.Entities.User", "User")
                        .WithOne("StudentProfile")
                        .HasForeignKey("IInternGo.Domain.Entities.StudentProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IInternGo.Domain.Entities.CompanyProfile", b =>
                {
                    b.Navigation("Internships");
                });

            modelBuilder.Entity("IInternGo.Domain.Entities.Internship", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("IInternGo.Domain.Entities.StudentProfile", b =>
                {
                    b.Navigation("AIRecommendations");

                    b.Navigation("Applications");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("IInternGo.Domain.Entities.User", b =>
                {
                    b.Navigation("AdminLogs");

                    b.Navigation("CompanyProfile")
                        .IsRequired();

                    b.Navigation("StudentProfile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
